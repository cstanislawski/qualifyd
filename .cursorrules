When writing backend code, you are an expert in Go, Gin, pgx, PostgreSQL, and Docker.

Core Principles
- Write idiomatic Go code following the official style guide
- Use Gin for HTTP routing and middleware
- Implement clean architecture with clear separation of concerns
- Follow RESTful API design principles
- Use dependency injection for better testability
- Implement proper error handling and logging
- Follow security best practices

Basic Guidelines
- Use English for all code and documentation
- Always specify types for variables and functions
- Avoid interface{} unless absolutely necessary
- Define appropriate structs and interfaces
- Use GoDoc comments for public functions and types
- Maintain consistent formatting with gofmt
- One export per file where possible

Naming Conventions
- PascalCase for exported functions, types, and structs
- camelCase for internal variables, functions, and methods
- kebab-case for files and directories
- UPPERCASE for environment variables
- Prefix boolean variables with verbs (is, has, can)
- Use full words over abbreviations except standard ones (API, URL)

Function Design
- Keep functions focused and under 20 lines
- Name with verb-object pattern (ProcessUser, ValidateInput)
- Use early returns to reduce nesting
- Limit parameters using structs for complex inputs
- Return errors instead of using panics
- Implement proper context handling
- Use middleware for cross-cutting concerns

Data Management
- Use pgx for database operations
- Implement repository pattern for data access
- Use transactions for multi-table operations
- Implement proper database migrations
- Use prepared statements for security
- Implement proper connection pooling
- Handle database errors appropriately

Queue Management
- Use RabbitMQ for distributed processing
- Implement idempotent consumers with unique message IDs
- Use dead letter queues and retry with exponential backoff
- Structure topics by domain and implement proper acknowledgment
- Handle errors, monitor queue metrics, and ensure graceful shutdown
- Consider message ordering and serialization requirements

API Design
- Use proper HTTP methods (GET, POST, PUT, DELETE)
- Implement proper request validation
- Use appropriate status codes
- Include error details in responses
- Implement proper rate limiting
- Use JSON for request/response bodies
- Implement proper API versioning

Error Handling
- Use custom error types for domain errors
- Implement proper error wrapping
- Log errors with appropriate context
- Return meaningful error messages
- Implement proper error middleware
- Use error codes for client responses
- Implement proper panic recovery

Security
- Implement proper authentication
- Use secure session management
- Implement proper CORS policies
- Use secure password hashing
- Implement proper input validation
- Use prepared statements for queries
- Implement proper role-based access

Testing
- Write unit tests for business logic
- Implement integration tests for APIs
- Use table-driven tests where appropriate
- Mock external dependencies
- Use testify for assertions
- Achieve high test coverage
- Implement proper test fixtures

Performance
- Use proper connection pooling
- Implement caching where appropriate
- Use proper database indexing
- Implement proper request timeouts
- Use efficient data structures
- Implement proper resource cleanup
- Monitor performance metrics

Logging and Monitoring
- Use structured logging
- Implement proper log levels
- Include relevant context in logs
- Implement request tracing
- Monitor application metrics
- Implement health checks
- Use proper logging middleware

Documentation
- Write clear GoDoc comments
- Document API endpoints
- Include usage examples
- Document configuration options
- Maintain changelog
- Document deployment process
- Include troubleshooting guides

Avoid adding additional dependencies unless absolutely necessary (e.g.: gin, pgx, etc.)

Follow these conventions for a maintainable, performant, and secure Go backend.
